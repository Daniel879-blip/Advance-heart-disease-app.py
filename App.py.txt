import streamlit as st
import pandas as pd
import numpy as np
from sklearn.model_selection import train_test_split
from sklearn.neighbors import KNeighborsClassifier
from sklearn.metrics import accuracy_score, confusion_matrix, classification_report
import seaborn as sns
import matplotlib.pyplot as plt

st.set_page_config(page_title="Heart Disease Prediction App", layout="centered")
st.title("💓 Heart Disease Prediction App")

# Load Dataset
@st.cache_data
def load_data():
    df = pd.read_csv("heart.csv")
    return df

df = load_data()

# Sidebar Navigation
st.sidebar.title("Navigation")
selection = st.sidebar.radio("Go to", ["1. View Dataset", "2. Visualize", "3. Predict"])

# 1. View Dataset
if selection == "1. View Dataset":
    st.subheader("🔍 Dataset Preview")
    st.dataframe(df.head(20))
    st.write("Shape of dataset:", df.shape)
    st.write("Missing values:", df.isnull().sum().sum())

# 2. Visualize
elif selection == "2. Visualize":
    st.subheader("📊 Data Visualization")
    st.write("Target Class Distribution:")
    fig, ax = plt.subplots()
    sns.countplot(data=df, x='target', palette="Set2", ax=ax)
    ax.set_title("Target Class Distribution")
    st.pyplot(fig)

    st.write("Correlation Heatmap:")
    fig, ax = plt.subplots(figsize=(10, 6))
    sns.heatmap(df.corr(), annot=True, cmap='coolwarm', ax=ax)
    st.pyplot(fig)

# 3. Predict
elif selection == "3. Predict":
    st.subheader("🤖 Make a Prediction")

    # User input for features
    def user_input_features():
        age = st.slider("Age", 29, 77, 54)
        sex = st.selectbox("Sex (1 = Male, 0 = Female)", [1, 0])
        cp = st.selectbox("Chest Pain Type (0–3)", [0, 1, 2, 3])
        trestbps = st.slider("Resting Blood Pressure", 94, 200, 130)
        chol = st.slider("Cholesterol", 126, 564, 246)
        fbs = st.selectbox("Fasting Blood Sugar > 120 (1 = True; 0 = False)", [1, 0])
        restecg = st.selectbox("Resting ECG (0–2)", [0, 1, 2])
        thalach = st.slider("Max Heart Rate", 71, 202, 150)
        exang = st.selectbox("Exercise Induced Angina (1 = Yes; 0 = No)", [1, 0])
        oldpeak = st.slider("Oldpeak", 0.0, 6.2, 1.0)
        slope = st.selectbox("Slope (0–2)", [0, 1, 2])
        ca = st.selectbox("Number of major vessels (0–3)", [0, 1, 2, 3])
        thal = st.selectbox("Thal (0 = Normal, 1 = Fixed Defect, 2 = Reversible Defect)", [0, 1, 2])

        data = {
            'age': age, 'sex': sex, 'cp': cp, 'trestbps': trestbps, 'chol': chol,
            'fbs': fbs, 'restecg': restecg, 'thalach': thalach, 'exang': exang,
            'oldpeak': oldpeak, 'slope': slope, 'ca': ca, 'thal': thal
        }
        return pd.DataFrame(data, index=[0])

    input_df = user_input_features()

    # Prepare data
    X = df.drop('target', axis=1)
    y = df['target']

    if len(y.unique()) < 2:
        st.error("❌ Cannot train model — target must have at least 2 classes.")
    else:
        # Split and train
        X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
        model = KNeighborsClassifier(n_neighbors=3)
        model.fit(X_train, y_train)

        # Prediction
        prediction = model.predict(input_df)
        prediction_proba = model.predict_proba(input_df)

        st.write("### Prediction:")
        st.success("Positive for Heart Disease 💓" if prediction[0] == 1 else "Negative for Heart Disease 💚")
        st.write("Prediction Probability:", prediction_proba)

        # Evaluation
        st.write("### Model Performance on Test Set:")
        y_pred = model.predict(X_test)
        st.write("Accuracy:", accuracy_score(y_test, y_pred))

        st.write("Confusion Matrix:")
        cm = confusion_matrix(y_test, y_pred)
        fig, ax = plt.subplots()
        sns.heatmap(cm, annot=True, fmt="d", cmap="Blues", ax=ax)
        st.pyplot(fig)

        st.write("Classification Report:")
        st.text(classification_report(y_test, y_pred))